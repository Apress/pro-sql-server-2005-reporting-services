//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SSRS_Viewer_RVC {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("Employees")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")]
    public partial class Employees : System.Data.DataSet {
        
        private EmployeePayDataTable tableEmployeePay;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Employees() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        protected Employees(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["EmployeePay"] != null)) {
                    base.Tables.Add(new EmployeePayDataTable(ds.Tables["EmployeePay"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeePayDataTable EmployeePay {
            get {
                return this.tableEmployeePay;
            }
        }
        
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        public override System.Data.DataSet Clone() {
            Employees cln = ((Employees)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EmployeePay"] != null)) {
                    base.Tables.Add(new EmployeePayDataTable(ds.Tables["EmployeePay"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableEmployeePay = ((EmployeePayDataTable)(base.Tables["EmployeePay"]));
            if ((initTable == true)) {
                if ((this.tableEmployeePay != null)) {
                    this.tableEmployeePay.InitVars();
                }
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Employees";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.tableEmployeePay = new EmployeePayDataTable();
            base.Tables.Add(this.tableEmployeePay);
        }
        
        private bool ShouldSerializeEmployeePay() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            Employees ds = new Employees();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void EmployeePayRowChangeEventHandler(object sender, EmployeePayRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeePayDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEmployeePayID;
            
            private System.Data.DataColumn columnEmployeeTblID;
            
            private System.Data.DataColumn columnEmployeeID;
            
            private System.Data.DataColumn columnStartDate;
            
            private System.Data.DataColumn columnAmount;
            
            public EmployeePayDataTable() {
                this.TableName = "EmployeePay";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal EmployeePayDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected EmployeePayDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn EmployeePayIDColumn {
                get {
                    return this.columnEmployeePayID;
                }
            }
            
            public System.Data.DataColumn EmployeeTblIDColumn {
                get {
                    return this.columnEmployeeTblID;
                }
            }
            
            public System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            public System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            public System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public EmployeePayRow this[int index] {
                get {
                    return ((EmployeePayRow)(this.Rows[index]));
                }
            }
            
            public event EmployeePayRowChangeEventHandler EmployeePayRowChanged;
            
            public event EmployeePayRowChangeEventHandler EmployeePayRowChanging;
            
            public event EmployeePayRowChangeEventHandler EmployeePayRowDeleted;
            
            public event EmployeePayRowChangeEventHandler EmployeePayRowDeleting;
            
            public void AddEmployeePayRow(EmployeePayRow row) {
                this.Rows.Add(row);
            }
            
            public EmployeePayRow AddEmployeePayRow(string EmployeePayID, int EmployeeTblID, string EmployeeID, System.DateTime StartDate, decimal Amount) {
                EmployeePayRow rowEmployeePayRow = ((EmployeePayRow)(this.NewRow()));
                rowEmployeePayRow.ItemArray = new object[] {
                        EmployeePayID,
                        EmployeeTblID,
                        EmployeeID,
                        StartDate,
                        Amount};
                this.Rows.Add(rowEmployeePayRow);
                return rowEmployeePayRow;
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                EmployeePayDataTable cln = ((EmployeePayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new EmployeePayDataTable();
            }
            
            internal void InitVars() {
                this.columnEmployeePayID = base.Columns["EmployeePayID"];
                this.columnEmployeeTblID = base.Columns["EmployeeTblID"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnAmount = base.Columns["Amount"];
            }
            
            private void InitClass() {
                this.columnEmployeePayID = new System.Data.DataColumn("EmployeePayID", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEmployeePayID);
                this.columnEmployeeTblID = new System.Data.DataColumn("EmployeeTblID", typeof(int), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEmployeeTblID);
                this.columnEmployeeID = new System.Data.DataColumn("EmployeeID", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEmployeeID);
                this.columnStartDate = new System.Data.DataColumn("StartDate", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStartDate);
                this.columnAmount = new System.Data.DataColumn("Amount", typeof(decimal), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAmount);
            }
            
            public EmployeePayRow NewEmployeePayRow() {
                return ((EmployeePayRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EmployeePayRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EmployeePayRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeePayRowChanged != null)) {
                    this.EmployeePayRowChanged(this, new EmployeePayRowChangeEvent(((EmployeePayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeePayRowChanging != null)) {
                    this.EmployeePayRowChanging(this, new EmployeePayRowChangeEvent(((EmployeePayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeePayRowDeleted != null)) {
                    this.EmployeePayRowDeleted(this, new EmployeePayRowChangeEvent(((EmployeePayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeePayRowDeleting != null)) {
                    this.EmployeePayRowDeleting(this, new EmployeePayRowChangeEvent(((EmployeePayRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEmployeePayRow(EmployeePayRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Employees ds = new Employees();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeePayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        public partial class EmployeePayRow : System.Data.DataRow {
            
            private EmployeePayDataTable tableEmployeePay;
            
            internal EmployeePayRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeePay = ((EmployeePayDataTable)(this.Table));
            }
            
            public string EmployeePayID {
                get {
                    try {
                        return ((string)(this[this.tableEmployeePay.EmployeePayIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EmployeePayID\' in table \'EmployeePay\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeePay.EmployeePayIDColumn] = value;
                }
            }
            
            public int EmployeeTblID {
                get {
                    try {
                        return ((int)(this[this.tableEmployeePay.EmployeeTblIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EmployeeTblID\' in table \'EmployeePay\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeePay.EmployeeTblIDColumn] = value;
                }
            }
            
            public string EmployeeID {
                get {
                    try {
                        return ((string)(this[this.tableEmployeePay.EmployeeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EmployeeID\' in table \'EmployeePay\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeePay.EmployeeIDColumn] = value;
                }
            }
            
            public System.DateTime StartDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEmployeePay.StartDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StartDate\' in table \'EmployeePay\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeePay.StartDateColumn] = value;
                }
            }
            
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeePay.AmountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Amount\' in table \'EmployeePay\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeePay.AmountColumn] = value;
                }
            }
            
            public bool IsEmployeePayIDNull() {
                return this.IsNull(this.tableEmployeePay.EmployeePayIDColumn);
            }
            
            public void SetEmployeePayIDNull() {
                this[this.tableEmployeePay.EmployeePayIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmployeeTblIDNull() {
                return this.IsNull(this.tableEmployeePay.EmployeeTblIDColumn);
            }
            
            public void SetEmployeeTblIDNull() {
                this[this.tableEmployeePay.EmployeeTblIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmployeeIDNull() {
                return this.IsNull(this.tableEmployeePay.EmployeeIDColumn);
            }
            
            public void SetEmployeeIDNull() {
                this[this.tableEmployeePay.EmployeeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartDateNull() {
                return this.IsNull(this.tableEmployeePay.StartDateColumn);
            }
            
            public void SetStartDateNull() {
                this[this.tableEmployeePay.StartDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountNull() {
                return this.IsNull(this.tableEmployeePay.AmountColumn);
            }
            
            public void SetAmountNull() {
                this[this.tableEmployeePay.AmountColumn] = System.Convert.DBNull;
            }
        }
        
        public class EmployeePayRowChangeEvent : System.EventArgs {
            
            private EmployeePayRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public EmployeePayRowChangeEvent(EmployeePayRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EmployeePayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
